package com_client;

import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;

import javafx.scene.control.TextField;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;

import javafx.scene.input.MouseEvent;

import java.io.IOException;
import java.net.URL;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ResourceBundle;

import com.sun.org.apache.xerces.internal.impl.xpath.regex.ParseException;


import com_connection.ConnectionDB;
import de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon;

import javafx.scene.control.TableView;

import javafx.scene.control.TableColumn;

public class ClientController  implements Initializable {
	@FXML
	private TextField idclient;
	@FXML
	private TextField nomtxt;
	@FXML
	private TextField txtPrenom;
	@FXML
	private TextField txtadresse;
	@FXML
	private TextField idtxt;
	@FXML
	private FontAwesomeIcon searchIcon;
	@FXML
	private Button btnAjouter;
	@FXML
	private Button btnSupp;
	@FXML
	private Button btnModifier;
	@FXML
	private Button btnAfficher;
	@FXML
	private Button btnVider;
	@FXML
	private TableView<Client> table;
	public ObservableList<Client> data = FXCollections.observableArrayList();
	@FXML
	private TableColumn <Client, Integer> idcolumn;
	@FXML
	private TableColumn<Client, String> nomcolumn;
	@FXML
	private TableColumn<Client, String> prenomcolumn;
	@FXML
	private TableColumn<Client, String> adressecolumn;
	@FXML
	private TableColumn<Client, Integer> telecolumn;
	@FXML
	private TableColumn<Client, String> emailcolumn;
	@FXML
	private TextField txttele;
	@FXML
	private TextField txtemail;

	
		
/*--------------------------------------------------AJOUTER----------------------------------------------------------------------------------*/	    

	
    public static int Ajouter(Client cl)
    {
    	Connection conn = ConnectionDB.conDB();
    	int rs = 0;
    	try {
    		
    		String sql = "insert into client(id_client , nom , prenom , adresse , telephone , email ) values(?,?,?,?,?,?)";
    		PreparedStatement stm = conn.prepareStatement(sql);
    		stm.setString(1, cl.getId_client());
    		stm.setString(2, cl.getNom());
    		stm.setString(3, cl.getPrenom());
    		stm.setString(4, cl.getAdresse());
    		stm.setString(5, cl.getTelephone());
    		stm.setString(6, cl.getEmail());
    		
    		
    		
    		 rs = stm.executeUpdate();
    		
    		
			
		} catch (Exception e) {
			// TODO: handle exception
			System.out.println(e.getMessage());
		}
    	
    return rs;	
    }
    
    
    
    public void insertdata ()
    {
    	String ID = idclient.getText();
    	String NOM = nomtxt.getText();
    	String PRENOM = txtPrenom.getText();
    	String ADDRESSE = txtadresse.getText();
    	String TELE = txttele.getText();
    	String EMAIL = txtemail.getText();
    	
    	
    	Client cl = new Client();
    	
    	cl.setId_client(ID);
    	cl.setNom(NOM);
    	cl.setPrenom(PRENOM);
    	cl.setAdresse(ADDRESSE);
    	cl.setTelephone(TELE);
    	cl.setEmail(EMAIL);
    	
    	
    	
    	int etat = Ajouter(cl);
    	
    	
    	if (etat > 0) {
    	
    	Alert alert = new Alert(AlertType.INFORMATION);
    	alert.setTitle("ajouter Client");
    	alert.setHeaderText("Information");
    	alert.setContentText("Client bien ajouter");
    	alert.showAndWait();
    	
              }
    	else
    	{
    		Alert alert = new Alert(AlertType.ERROR);
	    	alert.setTitle("ajouter Client");
	    	alert.setHeaderText("Information");
	    	alert.setContentText("Client Non ajouter");
	    	alert.showAndWait();	
    
    	}
    	
    	
    	
    	
    	}
	
	
/*--------------------------------------------------AFFICHER----------------------------------------------------------------------------------*/	    
    
    
    public void viewAbonnee(ActionEvent event) {
		// TODO Autogenerated
		
		try {
			
    		Connection conn = ConnectionDB.conDB();
    		String sql = "SELECT * FROM `client`" ;
    		PreparedStatement stm  = conn.prepareStatement(sql);
    		ResultSet rs = stm.executeQuery();
    		
    		while (rs.next())
    		{
    			data.add(new Client(rs.getString(1) , rs.getString(2) , rs.getString(3) , rs.getString(4) , rs.getString(5) ,  rs.getString(6) ) );
    			
    		}
    		conn.close();
    		
		} catch (Exception e) {
			// TODO: handle exception
		}
    	
		idcolumn.setCellValueFactory(new PropertyValueFactory<Client, Integer>("id_client"));
    	nomcolumn.setCellValueFactory(new PropertyValueFactory<Client, String>("nom"));
    	prenomcolumn.setCellValueFactory(new PropertyValueFactory<Client, String>("prenom"));
    	adressecolumn.setCellValueFactory(new PropertyValueFactory<Client, String>("adresse"));
    	telecolumn.setCellValueFactory(new PropertyValueFactory<Client, Integer>("telephone"));
    	emailcolumn.setCellValueFactory(new PropertyValueFactory<Client, String>("email"));
    	
    	table.setItems(data);	
	}
    
	
	
/*--------------------------------------------------MODIFIER----------------------------------------------------------------------------------*/	    
    
    public static int modifier(Client cl)
	{
		Connection conn = ConnectionDB.conDB();
    	int d = 0;
    	try {
    		
    		String sql = "update client set  nom = ? , prenom= ?  , adresse = ? , telephone = ? , email = ? where id_client = ?  ";
    		PreparedStatement stm = conn.prepareStatement(sql);
    		
    		stm.setString(1, cl.getNom());
    		stm.setString(2, cl.getPrenom());
    		stm.setString(3, cl.getAdresse());
    		stm.setString(4, cl.getTelephone());
    		stm.setString(5, cl.getEmail());
    		stm.setString(5, cl.getId_client());
    		
    		
    		 d = stm.executeUpdate();
    		
    		
			
		} catch (SQLException e) {
			// TODO: handle exception
			System.out.println(e.getMessage());
		}
    	
    return d;	
		
		
		
	}
	
    
    public void update (ActionEvent event) 
	{
    	String ID = idclient.getText();
    	String NOM = nomtxt.getText();
    	String PRENOM = txtPrenom.getText();
    	String ADRESSE = txtadresse.getText();
    	String TELE = txttele.getText();
    	String EMAIL = txtemail.getText();
    	
    	
    	Client cl = new Client();
    	
    	cl.setId_client(ID);
    	cl.setNom(NOM);
    	cl.setPrenom(PRENOM);
    	cl.setAdresse(ADRESSE);
    	cl.setTelephone(TELE);
    	cl.setEmail(EMAIL);
    	
    	
    	
    	int etat = modifier(cl);
    	
    	
    	if (etat > 0) {
    	
    	Alert alert = new Alert(AlertType.INFORMATION);
    	alert.setTitle("Modifier Client");
    	alert.setHeaderText("Information");
    	alert.setContentText("Client bien Modifier");
    	alert.showAndWait();
    	
              }
    	else
    	{
    		Alert alert = new Alert(AlertType.ERROR);
	    	alert.setTitle("Modifier Client");
	    	alert.setHeaderText("Information");
	    	alert.setContentText("Client Non Modifier");
	    	alert.showAndWait();	
    
    	}
    	
    	
    	
	}
    
    
 /*--------------------------------------------------SUPPRIMER----------------------------------------------------------------------------------*/	    
    
    
    public static int supp(String id)
	{
		Connection conn = ConnectionDB.conDB();
		int d = 0;
		
		
		try {
			
			String sql = "delete from client where id_client = ? ";
			PreparedStatement stm = conn.prepareStatement(sql);
			stm.setString(1, id);
			d = stm.executeUpdate();
			
		} catch (SQLException e) {
			// TODO: handle exception
			
			System.out.println(e.getMessage());
		}
		
		
		
		return d;
	
		
	}
    
    
    public void delete ()
	{
		String ID = idtxt.getText();
		int etat = supp(ID);
		
		if(etat > 0) 
        {
    	
    	Alert alert = new Alert(AlertType.INFORMATION);
    	alert.setTitle("Supprimer Abonnee");
    	alert.setHeaderText("Information");
    	alert.setContentText("Abonnee bien Supprimer");
    	alert.showAndWait();
    	
              }
    	else
    	{
    		Alert alert = new Alert(AlertType.ERROR);
	    	alert.setTitle("Supprimer Abonnee");
	    	alert.setHeaderText("Information");
	    	alert.setContentText("Abonnee Non Supprimer");
	    	alert.showAndWait();	
    
    	}
		
		
	}
    
    
    
   
/*--------------------------------------------------Rechercher----------------------------------------------------------------------------------*/	 	    
    
    public static Client getCL(String id)
	{
		
		Client cl = new Client();
		
		try {
			Connection conn = ConnectionDB.conDB();
			String sql = "select * from client where id_client = ?";
			PreparedStatement stm = conn.prepareStatement(sql);
			stm.setString(1 , id);
			ResultSet rs = stm.executeQuery();
			if (rs.next())
			{
				cl.setId_client(rs.getString(1));
				cl.setNom(rs.getString(2));
				cl.setPrenom(rs.getString(3));
				cl.setAdresse(rs.getString(4));
				cl.setTelephone(rs.getString(5));
				cl.setEmail(rs.getString(6));
				
			}
			
			
		} catch (Exception e) {
			// TODO: handle exception
			
			System.out.println(e.getMessage());
		}
		
		return cl;
	}
	
    
    
    public void rechercher (MouseEvent event) throws IOException , ParseException
	{
		String idcl = idtxt.getText();
		Client cl = getCL(idcl);
		nomtxt.setText(cl.getNom());
		txtPrenom.setText(cl.getPrenom());
		txtadresse.setText(cl.getAdresse());
		txttele.setText(cl.getTelephone());
		txtemail.setText(cl.getEmail());
	}
    
/*--------------------------------------------------Vider les champs----------------------------------------------------------------------------------*/	 	    	    
    
    
    public void vider ( )
    {
    	try {
    		idtxt.clear();
    		idclient.clear();
	    	nomtxt.clear();
	    	txtPrenom.clear();
	    	txtadresse.clear();
	    	txttele.clear();
	    	txtemail.clear();
	    	
		} catch (Exception e) {
			// TODO: handle exception
			System.out.println(e.getMessage());
		}
    	
    	
    	
    }



@Override
public void initialize(URL location, ResourceBundle resources) {
	// TODO Auto-generated method stub
	
}
    
    
    	
	
    
    
    
	
	
}
